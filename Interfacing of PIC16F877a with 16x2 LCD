/*include.h files*/



/* 
 * File:   include.h
 * Author: Shivam Jasal
 *
 * Created on March 5, 2020, 1:07 PM
 */

#define _XTAL_FREQ 20000000
//#define speed 1 // Speed Range 10 to 1  10 = lowest , 1 = highest
//#define steps 200 // how much step it will take
//#define clockwise 0 // clockwise direction macro
//#define anti_clockwise 1 // anti clockwise direction macro



#include <xc.h>


// BEGIN CONFIG
#pragma config FOSC = HS // Oscillator Selection bits (HS oscillator)
#pragma config WDTE = OFF // Watchdog Timer Enable bit (WDT enabled)
#pragma config PWRTE = OFF // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = ON // Brown-out Reset Enable bit (BOR enabled)
#pragma config LVP = OFF // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3 is digital I/O, HV on MCLR must be used for programming)
#pragma config CPD = OFF // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF // Flash Program Memory Code Protection bit (Code protection off)
//END CONFIG


/* LCD main() program*/


/* 
 * File:   lcdmain.c
 * Author: SURINDER  MEHTOT
 *
 * Created on March 5, 2020, 1:08 PM
 */

#include <stdio.h>
#include <stdlib.h>
#include "abc.h"


int main()
{
    unsigned int a;
    TRISD = 0x00;
    TRISB = 0x00;
    Lcd_Init();
    TRISD0 = 0; //RD0 as Output PIN
    
    
 // PORT B as output port
//PORTB = 0x1111111;


   while(1)
    {
       
       
       
       
/*PORTB= 0x00000110;
__delay_ms(1000);
PORTB = 0x00001100;
__delay_ms(1000);
PORTB = 0x00001001;
__delay_ms(1000);
PORTB = 0x00000011;  // energizing two phases at a time
__delay_ms(1000);
        //LED code
        RD0 = 1;  // LED ON
    __delay_ms(1000); // 1 Second Delay
         RD0 = 0;  // LED OFF
    __delay_ms(1000); // 1 Second Delay*/
    
    
    //stepper motor
 // delay of 0.5s


    
    
        Lcd_Clear();
        Lcd_Set_Cursor(1,1);
        Lcd_Write_String("Project for");
        Lcd_Set_Cursor(2,1);
        Lcd_Write_String("Smart parking");
        __delay_ms(2000);
        Lcd_Clear();
        Lcd_Set_Cursor(1,1);
        Lcd_Write_String("Developed By");
        Lcd_Set_Cursor(2,1);
        Lcd_Write_String("Group 1");
        __delay_ms(2000);
        Lcd_Clear();
        Lcd_Set_Cursor(1,1);
        Lcd_Write_String("welcome!!!!!");

        for(a=0;a<15;a++)
        {
            __delay_ms(300);
            Lcd_Shift_Left();
        }

        for(a=0;a<15;a++)
        {
            __delay_ms(300);
            Lcd_Shift_Right();
        }

        Lcd_Clear();
        Lcd_Set_Cursor(2,1);
        Lcd_Write_Char('O');
        Lcd_Write_Char('K');
        __delay_ms(2000);
    }
    return 0;
}



/* Operating function of LCD program*/

//LCD Functions Developed by electroSome
#include "include.h"

#define RS RD2
#define EN RD3
#define D4 RD4
#define D5 RD5
#define D6 RD6
#define D7 RD7
#define led_pin RD0 
//#define motor1 RB4
//#define motor2 RB5
//#define motor3 RB6
//#define motor4 RB7
void Lcd_Port(char a)
{
	if(a & 1)
		D4 = 1;
	else
		D4 = 0;

	if(a & 2)
		D5 = 1;
	else
		D5 = 0;

	if(a & 4)
		D6 = 1;
	else
		D6 = 0;

	if(a & 8)
		D7 = 1;
	else
		D7 = 0;
}
void Lcd_Cmd(char a)
{
	RS = 0;             // => RS = 0
	Lcd_Port(a);
	EN  = 1;             // => E = 1
        __delay_ms(4);
        EN  = 0;             // => E = 0
}

 Lcd_Clear()
{
	Lcd_Cmd(0);
	Lcd_Cmd(1);
}

void Lcd_Set_Cursor(char a, char b)
{
	char temp,z,y;
	if(a == 1)
	{
	  temp = 0x80 + b - 1;
		z = temp>>4;
		y = temp & 0x0F;
		Lcd_Cmd(z);
		Lcd_Cmd(y);
	}
	else if(a == 2)
	{
		temp = 0xC0 + b - 1;
		z = temp>>4;
		y = temp & 0x0F;
		Lcd_Cmd(z);
		Lcd_Cmd(y);
	}
}

void Lcd_Init()
{
  Lcd_Port(0x00);
   __delay_ms(20);
  Lcd_Cmd(0x03);
	__delay_ms(5);
  Lcd_Cmd(0x03);
	__delay_ms(11);
  Lcd_Cmd(0x03);
  /////////////////////////////////////////////////////
  Lcd_Cmd(0x02);
  Lcd_Cmd(0x02);
  Lcd_Cmd(0x08);
  Lcd_Cmd(0x00);
  Lcd_Cmd(0x0C);
  Lcd_Cmd(0x00);
  Lcd_Cmd(0x06);
}

void Lcd_Write_Char(char a)
{
   char temp,y;
   temp = a&0x0F;
   y = a&0xF0;
   RS = 1;             // => RS = 1
   Lcd_Port(y>>4);             //Data transfer
   EN = 1;
   __delay_us(40);
   EN = 0;
   Lcd_Port(temp);
   EN = 1;
   __delay_us(40);
   EN = 0;
}

void Lcd_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
	   Lcd_Write_Char(a[i]);
}

void Lcd_Shift_Right()
{
	Lcd_Cmd(0x01);
	Lcd_Cmd(0x0C);
}

void Lcd_Shift_Left()
{
	Lcd_Cmd(0x01);
	Lcd_Cmd(0x08);
}


